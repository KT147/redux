{"ast":null,"code":"// import { createStore } from \"redux\"\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nexport const INCREMENT = \"increment\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialLoggedinState = {};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\"\n});\n\n// const counterReducer = (state = initialState, action) => {\n\n//     // mitte kunagi ei tohi state'i ise muuta!!!!\n//     // if (action.type === \"increment\") {\n//     //    state.counter++\n\n//     //    return state\n//     // }\n\n//     if (action.type === INCREMENT) {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"toggle\") {\n//         return {\n//             counter: state.counter, \n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state\n// }\n\n// const store = createStore(counterSlice.reducer)\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","INCREMENT","initialCounterState","counter","showCounter","initialLoggedinState","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authSlice","store","reducer","counterActions","actions"],"sources":["/Users/atla/Desktop/GitHub/redux/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\"\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"\n\nexport const INCREMENT = \"increment\"\n\nconst initialCounterState = {counter: 0, showCounter: true}\nconst initialLoggedinState = {}\n\nconst counterSlice = createSlice({\n    name: \"counter\",\n    initialCounterState,\n    reducers:{\n        increment(state) {\n            state.counter++\n        },\n        decrement(state) {\n            state.counter--\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter\n        },\n    }\n})\n\nconst authSlice = createSlice({\n    name:\"auth\"\n})\n\n// const counterReducer = (state = initialState, action) => {\n\n//     // mitte kunagi ei tohi state'i ise muuta!!!!\n//     // if (action.type === \"increment\") {\n//     //    state.counter++\n\n//     //    return state\n//     // }\n\n\n//     if (action.type === INCREMENT) {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"toggle\") {\n//         return {\n//             counter: state.counter, \n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state\n// }\n\n// const store = createStore(counterSlice.reducer)\n\n\nconst store = configureStore({\n    reducer: counterSlice.reducer\n})\n\nexport const counterActions = counterSlice.actions\n\nexport default store"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,OAAO,MAAMC,SAAS,GAAG,WAAW;AAEpC,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAC3D,MAAMC,oBAAoB,GAAG,CAAC,CAAC;AAE/B,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,SAAS;EACfL,mBAAmB;EACnBM,QAAQ,EAAC;IACLC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,SAAS,GAAGjB,WAAW,CAAC;EAC1BQ,IAAI,EAAC;AACT,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA,MAAMU,KAAK,GAAGjB,cAAc,CAAC;EACzBkB,OAAO,EAAEZ,YAAY,CAACY;AAC1B,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAAO;AAElD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}